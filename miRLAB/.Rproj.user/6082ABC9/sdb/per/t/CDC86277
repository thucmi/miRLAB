{
    "contents" : "### R code from vignette source 'TargetScore.Rnw'\n\n###################################################\n### code chunk number 1: TargetScore\n###################################################\nlibrary(TargetScore)\n\n\n###################################################\n### code chunk number 2: helppage (eval = FALSE)\n###################################################\n## ?TargetScore\n\n\n###################################################\n### code chunk number 3: toy\n###################################################\ntrmt <- c(rnorm(10,mean=0.01), rnorm(1000,mean=1), rnorm(90,mean=2)) + 1e3\n\nctrl <- c(rnorm(1100,mean=1)) + 1e3\n\nlogFC <- log2(trmt) - log2(ctrl)\n\n# 8 out of the 10 down-reg genes have prominent seq score A\nseqScoreA <- c(rnorm(8,mean=-2), rnorm(1092,mean=0))\n\n# 10 down-reg genes plus 10 more genes have prominent seq score B\nseqScoreB <- c(rnorm(20,mean=-2), rnorm(1080,mean=0))\n\nseqScores <- cbind(seqScoreA, seqScoreB)             \n\np.targetScore <- targetScore(logFC, seqScores, tol=1e-3)\n\n# plot relation between targetScore and input variables\npairs(cbind(p.targetScore, logFC, seqScoreA, seqScoreB))\n\n\n###################################################\n### code chunk number 4: realtest\n###################################################\nextdata.dir <- system.file(\"extdata\", package=\"TargetScore\") \n\n# load test data\nload(list.files(extdata.dir, \"\\\\.RData$\", full.names=TRUE))\n\nmyTargetScores <- lapply(mytestdata, function(x) targetScore(logFC=x$logFC, seqScores=x[,c(3,4)], tol=1e3, maxiter=200))\n\nnames(myTargetScores) <- names(mytestdata)\n\nvalid <- lapply(names(myTargetScores), function(x) table((myTargetScores[[x]] > 0.3), mytestdata[[x]]$validated))\n\nnames(valid) <- names(mytestdata)\n\n# row pred and col validated targets\nvalid\n\n\n###################################################\n### code chunk number 5: getTargetScores demo (eval = FALSE)\n###################################################\n## library(TargetScoreData)\n## library(gplots)\n## \n## myTargetScores <- getTargetScores(\"hsa-miR-1\", tol=1e-3, maxiter=200)\n## \n## table((myTargetScores$targetScore > 0.1), myTargetScores$validated) # a very lenient cutoff\n## \n## # obtain all of targetScore for all of the 112 miRNA (takes time)\n## \n## logFC.imputed <- get_precomputed_logFC()\n## \n## mirIDs <- unique(colnames(logFC.imputed))\n## \n## # targetScoreMatrix <- mclapply(mirIDs, getTargetScores)\n## \n## # names(targetScoreMatrix) <- mirIDs\n\n\n###################################################\n### code chunk number 6: getTargetScores limma demo (eval = FALSE)\n###################################################\n## # Demo using limma\n## # download GEO data for hsa-miR-205\n## library(limma)\n## library(Biobase)\n## library(GEOquery)\n## library(gplots)\n## \n## gset <- getGEO(\"GSE11701\", GSEMatrix =TRUE, AnnotGPL=TRUE)\n## \n## if (length(gset) > 1) idx <- grep(\"GPL6104\", attr(gset, \"names\")) else idx <- 1\n## \n## gset <- gset[[idx]]\n## \n## geneInfo <- fData(gset)\n## \n## x <- normalizeVSN(exprs(gset))\n## \n## pData(gset)$title\n## \n## design <- model.matrix(~0+factor(c(1,1,1,1,2,2,2,2)))\n## \n## colnames(design) <- c(\"preNeg_control\", \"miR_205_transfect\")\n## \n## fit <- lmFit(x, design)\n## \n## #contrast\n## contrast.matrix <- makeContrasts(miR_205_transfect-preNeg_control,levels=design)\n## \n## fit2 <- contrasts.fit(fit, contrast.matrix)\n## \n## fit2 <- eBayes(fit2)\n## \n## limma_stats <- topTable(fit2, coef=1, number=nrow(fit2))\n## \n## limma_stats$gene_symbol <- geneInfo[match(limma_stats$ID, geneInfo$ID), \"Gene symbol\"]\n## \n## logFC <- as.matrix(limma_stats$logFC)\n## \n## rownames(logFC) <- limma_stats$gene_symbol\n## \n## # targetScore\n## myTargetScores <- getTargetScores(\"hsa-miR-205\", logFC, tol=1e-3, maxiter=200)\n\n\n###################################################\n### code chunk number 7: ROC (eval = FALSE)\n###################################################\n## library(ggplot2)\n## library(scales)\n## library(ROCR)\n## \n## # ROC\n## roceval <- function(myscores, labels_true, method) {\n##   \t\n## \tpred <- prediction(myscores, labels_true)\n## \t\t\n## \tperf <- performance( pred, \"tpr\", \"fpr\" )\n## \n## \tauc <- unlist(slot(performance( pred, \"auc\" ), \"y.values\"))\n## \n## \tfpr <- unlist(slot(perf, \"x.values\"))\n## \t\n## \ttpr <- unlist(slot(perf, \"y.values\"))\n##   \n## \tcutoffval <- unlist(slot(perf, \"alpha.values\"))\n## \n## \trocdf <- data.frame(x= fpr, y=tpr, cutoff=cutoffval, auc=auc, method=method,\n## \t\tmethodScore=sprintf(\"%s (%s)\", method, percent(auc)), curveType=\"ROC\")\n## \n## \treturn(rocdf)\t\n## }\n## \n## limma_stats$p.val <- -log10(limma_stats$P.Value)\n## \n## limma_stats$p.val[logFC > 0] <- 0\n## \n## \n## myeval <- rbind(\n##   roceval(myTargetScores$targetScore, myTargetScores$validated, \"TargetScore\"),\n## \troceval(limma_stats$p.val, myTargetScores$validated, \"Limma\"))\n## \n## \n## ggroc <- ggplot(myeval, aes(x=x, y=y, color=methodScore)) +\n## \n## \tgeom_line(aes(linetype=methodScore), size=0.7) +\n## \t\n## \tscale_x_continuous(\"False positive rate\", labels=percent) +\n## \t\n## \tscale_y_continuous(\"True positive rate\", labels=percent) +\n## \t\n## \ttheme(legend.title= element_blank())\n## \n## print(ggroc)\n## \n\n\n###################################################\n### code chunk number 8: getTargetScores deseq demo (eval = FALSE)\n###################################################\n## library(DESeq)\n## \n## cds <- makeExampleCountDataSet()\n## \n## cds <- estimateSizeFactors( cds )\n## \n## cds <- estimateDispersions( cds )\n## \n## deseq_stats <- nbinomTest( cds, \"A\", \"B\" )\n## \n## logFC <- deseq_stats$log2FoldChange[1:100]\n## \n## # random sequence score\n## seqScoreA <- rnorm(length(logFC))\n## \n## seqScoreB <- rnorm(length(logFC))\n## \n## seqScores <- cbind(seqScoreA, seqScoreB)\n## \n## p.targetScore <- targetScore(logFC, seqScores, tol=1e-3)\n\n\n###################################################\n### code chunk number 9: sessi\n###################################################\nsessionInfo()\n\n\n",
    "created" : 1431113978781.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3775909322",
    "id" : "CDC86277",
    "lastKnownWriteTime" : 1429244946,
    "path" : "D:/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/EXAMPLEs/TargetScore/inst/doc/TargetScore.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}