library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
test=Lasso("EMT35.csv", 1:35, 36:1189)
setwd("~/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Test-Environment")
test=Lasso("EMT35.csv", 1:35, 36:1189)
top100=Extopk(test, topk=100)
top100GO=GOBPenrichment(unique(top100[,2]),0.05)
dim(top100GO)
library(miRLAB)
top100GO=KEGGenrichment(unique(top100[,2]),0.05)
source("http://bioconductor.org/biocLite.R")
biocLite("KEGG.db")
library(miRLAB)
library(miRLAB)
top100GO=KEGGenrichment(unique(top100[,2]),0.05)
dim(top100GO)
top100GO
setwd("~/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Test-Environment")
library(miRLAB)
test=Lasso("EMT35.csv", 1:35, 36:1189)
top100=Extopk(test, topk=100)
top100GO=KEGGenrichment(unique(top100[,2]),0.05)
top100GO=GOBPenrichment(unique(top100[,2]),0.05)
search()
library(org.Hs.eg.db)
top100GO=KEGGenrichment(unique(top100[,2]),0.05)
detach("package:KEGG.db", unload=TRUE)
library("KEGG.db", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:KEGG.db", unload=TRUE)
top100GO=KEGGenrichment(unique(top100[,2]),0.05)
detach("package:KEGG.db", unload=TRUE)
top100GO=KEGGenrichment(unique(top100[,2]),0.05)
install.packages("clusterProfiler")
source("http://bioconductor.org/biocLite.R")
biocLite("clusterProfiler")
source("http://bioconductor.org/biocLite.R")
biocLite("biomaRt")
top100GO=GOKEGGenrichment(unique(top100[,2]),0.05)
library(miRLAB)
top100GO=GOKEGGenrichment(unique(top100[,2]),0.05)
top100GO=GOKEGGenrichment(unique(top100[,2]),0.05)
library(miRLAB)
top100GO=GOKEGGenrichment(unique(top100[,2]),0.05)
dim(top100GO)
dim(top100GO[[1]])
dim(top100GO[[2]])
top100GO
#'
search()
library(miRLAB)
search()
setwd("~/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Test-Environment")
search()
IDA("EMT35.csv", 1:35, 36:1189)
library(pcalg)
IDA("EMT35.csv", 1:35, 36:1189)
library(miRLAB)
IDA("EMT35.csv", 1:35, 36:1189)
library(miRLAB)
library(miRLAB)
generateData=function(p, n, nC, nI, prob){
#p: number of variables
#n: number of samples
#nC: number of causes
#nI: number of non causes
#prob: probability distribution of the target variable (1s)
Data = c()
#set.seed(123)
T=rbinom(n, 1, prob)
p1=plogis(-0.5+1*T)
for (i in 1:nC){
temp=rbinom(n, 1, prob=p1)
Data=cbind(Data, temp)
}
p2=plogis(0-0*T)
for (i in 1:nI){
temp=rbinom(n, 1, prob=p2)
Data=cbind(Data, temp)
}
dataset=cbind(Data, T)
# pcs=pcSelect(dataset[,p], dataset[,-p], 0.05)
# causes=which(pcs$G==TRUE)
# names(causes)=NULL
# cat("number of causes is:", length(causes), "\n")
# datasetcauses=dataset[,causes]
# therest=dataset[,-causes]
# datasetsorted=cbind(datasetcauses, therest)
# #pc.dataset <- pc(suffStat = list(dm = dataset, adaptDF = FALSE), indepTest = binCItest, alpha = 0.05, p=ncol(dataset))
# #plot(pc.dataset)
# return(datasetsorted)
return(dataset)
}
data=generateData(39, 5000, 6, 32, 0.4)
dim(data)
data[1:5,1:5]
save(data, file="data39.Rdata")
getpwd()
getwd()
data1=data[,c(1:3, 7:22, 39)]
dim(data1)
data2=data[,c(4:6, 23:38, 39)]
dim(data2)
save(data1, file="data1.csv")
save(data2, file="data2.csv")
datatemp=data2[,c(4:6, 1:3, 7:20)]
data2[1:5,1:8]
datatemp[1:5,1:8]
datatemp[1:5,20]
data2[1:5,20]
data3=rbind(data1, datatemp)
dim(data3)
save(data3, file="data3.csv")
save(data3, file="data3.txt")
save(data1, file="data1.txt")
save(data2, file="data2.txt")
save(data2, file="data2.Rdata")
save(data1, file="data1.Rdata")
save(data3, file="data3.Rdata")
setwd("D:/Dropbox-letd/Dropbox/COLLABORATORS/SHU-Thuc/CDT-Experiments")
dim(data1)
dim(data2)
dim(data3)
library(pcalg)
pc1=pcSelect(data1[,20], data1[,-20], alpha=0.05)
pc1
pc2=pcSelect(data2[,20], data2[,-20], alpha=0.05)
pc2
pc2=pcSelect(data2[,20], data2[,-20], alpha=0.01)
pc2
pc3=pcSelect(data3[,20], data3[,-20], alpha=0.01)
pc3
x=c(rep(1,5000), rep(0,5000))
data4=cbind(x, data3)
dim(data4)
dim(data1)
dim(data)
pc=pcSelect(data[,39], data[,-39], alpha=0.01)
pc
pc4=pcSelect(data4[,21], data4[,-21], alpha=0.01)
pc4
random=generateData(20, 10000, 0, 19,0.4)
dim(random)
random[1:5,1:5]
random=generateData(21, 10000, 1, 19,0.4)
dim(random)
random=random[,-1]
dim(random)
combine=rbind(data1,random)
dim(combine)
pccombine=pcSelect(combine[,20], combine[,-20], alpha=0.01)
pccombine
random=generateData(21, 20000, 1, 19,0.4)
random=random[,-1]
combine=rbind(data1,random)
pccombine=pcSelect(combine[,20], combine[,-20], alpha=0.01)
pccombine
library(miRLAB)
dts=system.file("inst/extdata", "EMT35.csv", package="miRLAB" )
dts
library(miRLAB)
ps=Pearson(dts, cause=1:35, effect=36:1189)
dts=system.file("inst/extdata", package="miRLAB" )
dts
dt=paste(dts, "EMT35.csv", sep="")
dt
ps=Pearson(dt, cause=1:35, effect=36:1189)
dts=system.file("/inst/extdata", package="miRLAB" )
dts
dt=paste(dts, "EMT35.csv", sep="")
ps=Pearson(dt, cause=1:35, effect=36:1189)
dts=system.file("./inst/extdata", package="miRLAB" )
dts
dt=paste(dts, "EMT35.csv", sep="")
ps=Pearson(dt, cause=1:35, effect=36:1189)
dts=system.file("extdata","EMT35.csv", package="miRLAB" )
dts
ps=Pearson(dts, cause=1:35, effect=36:1189)
dim(ps)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
EMI <- function(x, y) {
# library(ghyp)
# library(entropy)
Mx <- matrix(x, length(x), 1)
My <- matrix(y, length(y), 1)
nbins <- ceiling(log(length(Mx[,1]),2)) + 1
a <- hist2d(cbind(Mx,My), nbins=nbins,show=FALSE)
result <- mi.empirical(a$counts)
return(result)
}
x=rnorm(100)
y=rnorm(100)
z=EMI(x,y)
library(ghyp)
?hist2d
library(entropy)
?hist2d
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library("BiocCheck", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
setwd("~/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Project")
?BiocCheck
BiocCheck("miRLAB_0.99.0.tar.gz")
library(miRLAB)
library(miRLAB)
BiocCheck("miRLAB_0.99.0.tar.gz")
library(miRLAB)
BiocCheck("miRLAB_0.99.0.tar.gz")
BiocCheck("miRLAB_0.99.0.tar.gz")
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(biocCheck)
library(BiocCheck)
setwd("~/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Project")
BiocCheck("miRLAB_0.99.0.tar.gz")
search()
?Glist
??Glist
library(miRLAB)
library(miRLAB)
?geneIdsByCategory
?Category::geneIdsByCategory
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(BiocCheck)
BiocCheck("miRLAB_0.99.0.tar.gz")
setwd("~/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Project")
BiocCheck("miRLAB_0.99.0.tar.gz")
search()
library(miRLAB)
search()
library(miRLAB)
search()
search()
library(miRLAB)
detach("package:DBI", unload=TRUE)
remove.packages("DBI")
source("http://bioconductor.org/biocLite.R")
biocLite("org.Hs.eg.db")
install.packages("DBI")
install.packages("DBI")
source("http://bioconductor.org/biocLite.R")
biocLite("org.Hs.eg.db")
library(miRLAB)
library(miRLAB)
?IDA
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(biocCheck)
library(BiocCheck)
setwd("~/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Project")
BiocCheck("miRLAB_0.99.0.tar.gz")
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
setwd("~/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Project")
library(BiocCheck)
BiocCheck("miRLAB_0.99.3.tar.gz")
?ValidateAll
library(miRLAB)
?ValidateAll
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(BiocCheck)
BiocCheck("miRLAB_0.99.3.tar.gz")
setwd("~/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Project")
BiocCheck("miRLAB_0.99.3.tar.gz")
file.exists("miRLAB_0.99.0.tar.gz")
if(!file.exists("miRLAB_0.99.0.tar.gz")) print("hehe")
if(!file.exists("miRLAB_0.99.0.tar.gzd")) print("hehe")
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
setwd("~/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Project")
library(BiocCheck)
BiocCheck("miRLAB_0.99.3.tar.gz")
library("limma", lib.loc="~/R/R-3.2.0/library")
?topTable
library(miRLAB)
library(miRLAB)
library(miRLAB)
install.packages("RUnit")
library(miRLAB)
load("D:/Dropbox-letd/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Project/database.RData")
convert = function (miRNAListFile,sourceVersionFile,targetVersionFile) {
load( "database.RData" )
miRNAList = as.matrix( read.csv( miRNAListFile ,header = FALSE) )
sourceVersion = as.matrix( read.csv( sourceVersionFile ,header = FALSE) )
targetVersion = as.matrix( read.csv( targetVersionFile ,header = FALSE) )
table = cbind(miRNAList, sourceVersion, targetVersion)
sourceName = c()
targetName = c()
allVersionList = c(all[,2],all[,3],all[,4],all[,5],all[,6],all[,7])
for ( i in 1:dim(table)[1] ) { # for table
if  (table[i,2] == 0) { # don't have the source version
location = match(table[i,1], allVersionList)
if (is.na(location)) { # not have
sourceName[i] = "not existence"
targetName[i] = "not existence"
}
else
{
sourceVersion[i] = 16 + (location %/% 2602)
table[i,2] = sourceVersion[i]
location = location %% 2602
if (location == 0) location = 2602
sourceName[i] = all[location, as.numeric(table[i,2])-14]
targetName[i] = all[location, as.numeric(table[i,3])-14]
}
}
else  # have the source version
{
location = match(table[i,1], all[,as.numeric(table[i,2])-14])
if (is.na(location)) {
sourceName[i] = "not existence"
targetName[i] = "not existence"
}
else
{
sourceName[i] = all[location, as.numeric(table[i,2])-14]
targetName[i] = all[location, as.numeric(table[i,3])-14]
}
}
}
res = c(table[,1], table[,2], sourceName, table[,3], targetName)
res = matrix(res,ncol=5)
colnames(res) = c("miRNA","sourceVersion","sourceName","targetVersion","targetName")
write.table(res, file="resOfConvert.csv", sep=",",row.names = FALSE,col.names = TRUE)
}
setwd("D:/Dropbox-letd/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Project/test")
convert("emtmirs.csv", 0, 17)
setwd("D:/Dropbox-letd/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Project/test")
convert = function (miRNAListFile,sourceV,targetV) {
load( "database.RData" )
miRNAList = as.matrix( read.csv( miRNAListFile ,header = F) )
sourceName = miRNAList
sourceVersion = c()
targetName = c()
targetVersion = c()
if (sourceV != 0) # have the source version
{
location = match( miRNAList, all[,sourceV-14] )
isNA = is.na(location)
targetVersion[which(!isNA)] = targetV
targetVersion[which(isNA)] = NA
targetName = all[location, targetV-14]
sourceVersion = rep(sourceV,length(miRNAList))
}else
{
allVersionList = c(all[,2],all[,3],all[,4],all[,5],all[,6],all[,7])
location = match(miRNAList, allVersionList)
sourceVersion = 16 + (location %/% 2602)
isNA = is.na(location)
targetVersion[which(!isNA)] = targetV
targetVersion[which(isNA)] = NA
location = location %% 2602
location[which(location == 0)] = 2602
targetName = all[location, targetV-14]
}
res = cbind(sourceName, sourceVersion, targetName, targetVersion)
colnames(res) = c("sourceName","sourceVersion","targetName","targetVersion")
write.table(res, file="resOfConvert.csv", sep=",",row.names = FALSE,col.names = TRUE)
}
convert("emtmirs.csv", 17, 21)
convert("emtmirs.csv", 0, 21)
library(miRLAB)
library(miRLAB)
load("D:/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Project/miRLAB/data/database.RData")
View(all)
library(miRLAB)
library(miRLAB)
library(miRLAB)
a=load("D:/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Project/miRLAB/data/database.RData")
dim(a)
a[1:4]
a
all
a[all]
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
?ReadExtResult
library(miRLAB)
?ReadExtResult
library(miRLAB)
?ReadExtResult
library(BiocCheck)
BiocCheck("miRLAB_1.2.0.tar.gz")
setwd("~/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Project")
BiocCheck("miRLAB_1.2.0.tar.gz")
library(miRLAB)
setwd("~/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Project")
library(BiocCheck)
BiocCheck("miRLAB_1.2.0.tar.gz")
library(miRLAB)
BiocCheck("miRLAB_1.1.1.tar.gz")
library(BiocCheck)
BiocCheck("miRLAB_1.1.1.tar.gz")
setwd("~/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Project")
BiocCheck("miRLAB_1.1.1.tar.gz")
library(miRLAB)
setwd("~/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Test-Environment/BR51")
top=DiffExpAnalysis("BR51_miRNA_Luminal.csv", "BR51_miRNA_Basal.csv", "BR51_mRNA_Luminal.csv", "BR51_mRNA_Basal.csv",100, 2000, p.miR=0.3, p.mR=0.05)
top=DiffExpAnalysis("BR51_miRNA_Luminal.csv", "BR51_miRNA_Basal.csv", "BR51_mRNA_Luminal.csv", "BR51_mRNA_Basal.csv",100, 2000, p.miR=0.3, p.mR=0.05)
miR1="BR51_miRNA_Luminal.csv"
miR2="BR51_miRNA_Basal.csv"
miR1=read.csv(miR1, header=TRUE, sep=",")
miRnames=miR1[,1]
miR1=miR1[,-1]
c1=ncol(miR1)
c1
length(miRnames)
dim(miR1)
miR2=read.csv(miR2, header=TRUE, sep=",")
miR2=miR2[,-1]
c2=ncol(miR2)
dim(miR2)
miRnames
write.table(miRnames, file="miRnames.txt")
dim(miR2)
miR2[,1]
miR2=read.csv(miR2, header=TRUE, sep=",")
miR2=miR2[,-1]
c2=ncol(miR2)
miR2="BR51_miRNA_Basal.csv"
miR2=read.csv(miR2, header=TRUE, sep=",")
miR2=miR2[,-1]
c2=ncol(miR2)
dim(miR2)
top=DiffExpAnalysis("BR51_miRNA_Luminal.csv", "BR51_miRNA_Basal.csv", "BR51_mRNA_Luminal.csv", "BR51_mRNA_Basal.csv",100, 2000, p.miR=0.3, p.mR=0.05)
top=DiffExpAnalysis("BR51_miRNA_Luminal.csv", "BR51_miRNA_Basal.csv", "BR51_mRNA_Luminal.csv", "BR51_mRNA_Basal.csv",100, 2000, p.miR=0.3, p.mR=0.05)
top=DiffExpAnalysis("BR51_miRNA_Luminal.csv", "BR51_miRNA_Basal.csv", "BR51_mRNA_Luminal.csv", "BR51_mRNA_Basal.csv",100, 2000, p.miR=0.9, p.mR=0.05)
library(miRLAB)
setwd("~/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/miRLAB/BR51")
DiffExpAnalysis("BR51-miR-Basal.csv", "BR51-miR-Luminal.csv", "BR51-mR-Basal.csv", "BR51-mR-Luminal.csv",100, 2000, 0.3, 0.05)
setwd("~/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/miRLAB/BR51/before-remove-duplicates")
mRb=read.csv("BR51-mR-Basal-probes.csv", header=TRUE, sep=",")
mRl=read.csv("BR51-mR-Luminal-probes.csv", header=TRUE, sep=",")
mRb[1:3,1:3]
mRb1=mRb[,-2]
mRl1=mRl[,-2]
t=DiffExpAnalysis("BR51-miR-Basal.csv", "BR51-miR-Luminal.csv", "BR51-mR-B-probes.csv", "BR51-mR-L-probes.csv",100, 2000, 0.3, 0.05)
t=DiffExpAnalysis("BR51-miR-Basal.csv", "BR51-miR-Luminal.csv", "BR51-mR-B-probes.csv", "BR51-mR-L-probes.csv",100, 5000, 0.3, 0.05)
library(miRLAB)
citation()
library(miRLAB)
citation()
citation("miRLAB")
library(miRLAB)
citation("miRLAB")
library(miRLAB)
library(miRLAB)
library(miRLAB)
library(miRLAB)
load("~/Dropbox/PROJECTS-WORKING/miRLAB-APPLICATION-NOTE/Project/miRLAB/inst/extdata/database.RData")
database
View(all)
library(miRLAB)
library(miRLAB)
?KEGGenrichment
KEGGenrichment(c("miR-200a","miR-200b", "ZEB1"), 0.05)
library(miRLAB)
library(miRLAB)
BiocCheck("miRLAB_1.2.0.tar.gz")
library(BiocCheck)
BiocCheck("miRLAB_1.2.0.tar.gz")
